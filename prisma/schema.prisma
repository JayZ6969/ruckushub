// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  bio       String?
  title     String?
  department String?
  location  String?
  website   String?
  password  String?  // Add password field for credentials auth
  points    Int      @default(0)
  level     Int      @default(1)
  reputation Int     @default(0)
  badges    String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Auth-related fields for NextAuth
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Relations
  questions Question[]
  answers   Answer[]
  votes     Vote[]
  redemptions RewardRedemption[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  icon        String?
  color       String   @default("#3b82f6")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  questions Question[]

  @@map("categories")
}

model Question {
  id          String   @id @default(cuid())
  title       String
  content     String
  slug        String   @unique
  views       Int      @default(0)
  isResolved  Boolean  @default(false)
  isPinned    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  authorId   String
  categoryId String

  // Relations
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])
  answers  Answer[]
  votes    Vote[]
  tags     Tag[]

  @@map("questions")
}

model Answer {
  id         String   @id @default(cuid())
  content    String
  isAccepted Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Foreign keys
  authorId   String
  questionId String

  // Relations
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  votes    Vote[]

  @@map("answers")
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  questions Question[]

  @@map("tags")
}

model Vote {
  id         String   @id @default(cuid())
  type       VoteType
  createdAt  DateTime @default(now())
  userId     String
  
  // Foreign keys (optional - either question or answer)
  questionId String?
  answerId   String?

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer   Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)

  // Ensure a user can only vote once per item
  @@unique([userId, questionId])
  @@unique([userId, answerId])
  @@map("votes")
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

model Reward {
  id          String   @id @default(cuid())
  name        String
  description String
  points      Int
  category    String
  icon        String   @default("Gift")
  available   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  redemptions RewardRedemption[]

  @@map("rewards")
}

model RewardRedemption {
  id        String            @id @default(cuid())
  userId    String
  rewardId  String
  points    Int
  status    RedemptionStatus  @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  reward Reward @relation(fields: [rewardId], references: [id], onDelete: Cascade)

  @@map("reward_redemptions")
}

enum RedemptionStatus {
  PENDING
  APPROVED
  DELIVERED
  CANCELLED
}
